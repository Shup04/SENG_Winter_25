
TestRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003280  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003410  08003410  00004410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003444  08003444  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003444  08003444  00004444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800344c  0800344c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800344c  0800344c  0000444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003450  08003450  00004450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003454  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005014  2**0
                  CONTENTS
 10 .bss          00012d80  20000014  20000014  00005014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012d94  20012d94  00005014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d569  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002230  00000000  00000000  000125ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  000147e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aab  00000000  00000000  000155a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa7a  00000000  00000000  00016053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbc8  00000000  00000000  00035acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d71c8  00000000  00000000  00045695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c85d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f4  00000000  00000000  0011c8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  00120194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033f8 	.word	0x080033f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080033f8 	.word	0x080033f8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f103 0208 	add.w	r2, r3, #8
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f04f 32ff 	mov.w	r2, #4294967295
 80004d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f103 0208 	add.w	r2, r3, #8
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f103 0208 	add.w	r2, r3, #8
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800051a:	b480      	push	{r7}
 800051c:	b085      	sub	sp, #20
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d103      	bne.n	800053a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e00c      	b.n	8000554 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3308      	adds	r3, #8
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e002      	b.n	8000548 <vListInsert+0x2e>
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	429a      	cmp	r2, r3
 8000552:	d2f6      	bcs.n	8000542 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	6892      	ldr	r2, [r2, #8]
 80005a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6852      	ldr	r2, [r2, #4]
 80005ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d103      	bne.n	80005c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10b      	bne.n	8000610 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d05d      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800061a:	2b00      	cmp	r3, #0
 800061c:	d059      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000626:	2100      	movs	r1, #0
 8000628:	fba3 2302 	umull	r2, r3, r3, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d000      	beq.n	8000632 <xQueueGenericReset+0x52>
 8000630:	2101      	movs	r1, #1
 8000632:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14c      	bne.n	80006d2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000638:	f001 f934 	bl	80018a4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000644:	6939      	ldr	r1, [r7, #16]
 8000646:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	441a      	add	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000668:	3b01      	subs	r3, #1
 800066a:	6939      	ldr	r1, [r7, #16]
 800066c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	441a      	add	r2, r3
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	22ff      	movs	r2, #255	@ 0xff
 800067c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	22ff      	movs	r2, #255	@ 0xff
 8000684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d114      	bne.n	80006b8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d01a      	beq.n	80006cc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	3310      	adds	r3, #16
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fd78 	bl	8001190 <xTaskRemoveFromEventList>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d012      	beq.n	80006cc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <xQueueGenericReset+0x120>)
 80006a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	e009      	b.n	80006cc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3310      	adds	r3, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff feff 	bl	80004c0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3324      	adds	r3, #36	@ 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fefa 	bl	80004c0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006cc:	f001 f91c 	bl	8001908 <vPortExitCritical>
 80006d0:	e001      	b.n	80006d6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10b      	bne.n	80006f4 <xQueueGenericReset+0x114>
    __asm volatile
 80006dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	60bb      	str	r3, [r7, #8]
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80006f4:	697b      	ldr	r3, [r7, #20]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000ed04 	.word	0xe000ed04

08000704 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af02      	add	r7, sp, #8
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	4613      	mov	r3, r2
 8000710:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d02e      	beq.n	800077a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800071c:	2100      	movs	r1, #0
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	fba3 2302 	umull	r2, r3, r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d000      	beq.n	800072c <xQueueGenericCreate+0x28>
 800072a:	2101      	movs	r1, #1
 800072c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800072e:	2b00      	cmp	r3, #0
 8000730:	d123      	bne.n	800077a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800073a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800073e:	d81c      	bhi.n	800077a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	3350      	adds	r3, #80	@ 0x50
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f984 	bl	8001a5c <pvPortMalloc>
 8000754:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01d      	beq.n	8000798 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3350      	adds	r3, #80	@ 0x50
 8000764:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f000 f815 	bl	80007a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000778:	e00e      	b.n	8000798 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10b      	bne.n	8000798 <xQueueGenericCreate+0x94>
    __asm volatile
 8000780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	613b      	str	r3, [r7, #16]
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000798:	69fb      	ldr	r3, [r7, #28]
    }
 800079a:	4618      	mov	r0, r3
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e002      	b.n	80007c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007d0:	2101      	movs	r1, #1
 80007d2:	69b8      	ldr	r0, [r7, #24]
 80007d4:	f7ff ff04 	bl	80005e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	78fa      	ldrb	r2, [r7, #3]
 80007dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af04      	add	r7, sp, #16
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f92e 	bl	8001a5c <pvPortMalloc>
 8000800:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d013      	beq.n	8000830 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000808:	2058      	movs	r0, #88	@ 0x58
 800080a:	f001 f927 	bl	8001a5c <pvPortMalloc>
 800080e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d008      	beq.n	8000828 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000816:	2258      	movs	r2, #88	@ 0x58
 8000818:	2100      	movs	r1, #0
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f002 fdc0 	bl	80033a0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	631a      	str	r2, [r3, #48]	@ 0x30
 8000826:	e005      	b.n	8000834 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000828:	6938      	ldr	r0, [r7, #16]
 800082a:	f001 f96b 	bl	8001b04 <vPortFree>
 800082e:	e001      	b.n	8000834 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00d      	beq.n	8000856 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800083a:	2300      	movs	r3, #0
 800083c:	9303      	str	r3, [sp, #12]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	9302      	str	r3, [sp, #8]
 8000842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	6a3b      	ldr	r3, [r7, #32]
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f000 f828 	bl	80008a6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000856:	697b      	ldr	r3, [r7, #20]
    }
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af02      	add	r7, sp, #8
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800086e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f7ff ffb3 	bl	80007e8 <prvCreateTask>
 8000882:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d005      	beq.n	8000896 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800088a:	6938      	ldr	r0, [r7, #16]
 800088c:	f000 f89c 	bl	80009c8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000890:	2301      	movs	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e002      	b.n	800089c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800089c:	697b      	ldr	r3, [r7, #20]
    }
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b088      	sub	sp, #32
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80008b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	461a      	mov	r2, r3
 80008be:	21a5      	movs	r1, #165	@ 0xa5
 80008c0:	f002 fd6e 	bl	80033a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80008c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80008ce:	3b01      	subs	r3, #1
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	f023 0307 	bic.w	r3, r3, #7
 80008dc:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	f003 0307 	and.w	r3, r3, #7
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00b      	beq.n	8000900 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80008e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ec:	f383 8811 	msr	BASEPRI, r3
 80008f0:	f3bf 8f6f 	isb	sy
 80008f4:	f3bf 8f4f 	dsb	sy
 80008f8:	617b      	str	r3, [r7, #20]
}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d01e      	beq.n	8000944 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
 800090a:	e012      	b.n	8000932 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	4413      	add	r3, r2
 8000912:	7819      	ldrb	r1, [r3, #0]
 8000914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	4413      	add	r3, r2
 800091a:	3334      	adds	r3, #52	@ 0x34
 800091c:	460a      	mov	r2, r1
 800091e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d006      	beq.n	800093a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	3301      	adds	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	2b09      	cmp	r3, #9
 8000936:	d9e9      	bls.n	800090c <prvInitialiseNewTask+0x66>
 8000938:	e000      	b.n	800093c <prvInitialiseNewTask+0x96>
            {
                break;
 800093a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800093c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800093e:	2200      	movs	r2, #0
 8000940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000946:	2b04      	cmp	r3, #4
 8000948:	d90b      	bls.n	8000962 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800094a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800094e:	f383 8811 	msr	BASEPRI, r3
 8000952:	f3bf 8f6f 	isb	sy
 8000956:	f3bf 8f4f 	dsb	sy
 800095a:	613b      	str	r3, [r7, #16]
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	e7fd      	b.n	800095e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000964:	2b04      	cmp	r3, #4
 8000966:	d901      	bls.n	800096c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000968:	2304      	movs	r3, #4
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800096c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800096e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000970:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000976:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800097a:	3304      	adds	r3, #4
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fdbf 	bl	8000500 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000984:	3318      	adds	r3, #24
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fdba 	bl	8000500 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800098c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800098e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000990:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000994:	f1c3 0205 	rsb	r2, r3, #5
 8000998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	68f9      	ldr	r1, [r7, #12]
 80009a6:	69b8      	ldr	r0, [r7, #24]
 80009a8:	f000 fe00 	bl	80015ac <pxPortInitialiseStack>
 80009ac:	4602      	mov	r2, r0
 80009ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009b0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80009b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80009b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80009d0:	f000 ff68 	bl	80018a4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80009d4:	4b41      	ldr	r3, [pc, #260]	@ (8000adc <prvAddNewTaskToReadyList+0x114>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a40      	ldr	r2, [pc, #256]	@ (8000adc <prvAddNewTaskToReadyList+0x114>)
 80009dc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80009de:	4b40      	ldr	r3, [pc, #256]	@ (8000ae0 <prvAddNewTaskToReadyList+0x118>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d109      	bne.n	80009fa <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80009e6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ae0 <prvAddNewTaskToReadyList+0x118>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80009ec:	4b3b      	ldr	r3, [pc, #236]	@ (8000adc <prvAddNewTaskToReadyList+0x114>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d110      	bne.n	8000a16 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80009f4:	f000 fcbe 	bl	8001374 <prvInitialiseTaskLists>
 80009f8:	e00d      	b.n	8000a16 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80009fa:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae4 <prvAddNewTaskToReadyList+0x11c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d109      	bne.n	8000a16 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a02:	4b37      	ldr	r3, [pc, #220]	@ (8000ae0 <prvAddNewTaskToReadyList+0x118>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d802      	bhi.n	8000a16 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000a10:	4a33      	ldr	r2, [pc, #204]	@ (8000ae0 <prvAddNewTaskToReadyList+0x118>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000a16:	4b34      	ldr	r3, [pc, #208]	@ (8000ae8 <prvAddNewTaskToReadyList+0x120>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ae8 <prvAddNewTaskToReadyList+0x120>)
 8000a1e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000a20:	4b31      	ldr	r3, [pc, #196]	@ (8000ae8 <prvAddNewTaskToReadyList+0x120>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <prvAddNewTaskToReadyList+0x124>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	4a2d      	ldr	r2, [pc, #180]	@ (8000aec <prvAddNewTaskToReadyList+0x124>)
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a3e:	492c      	ldr	r1, [pc, #176]	@ (8000af0 <prvAddNewTaskToReadyList+0x128>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	440b      	add	r3, r1
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	3204      	adds	r2, #4
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	1d1a      	adds	r2, r3, #4
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000af0 <prvAddNewTaskToReadyList+0x128>)
 8000a7e:	441a      	add	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	615a      	str	r2, [r3, #20]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a88:	4919      	ldr	r1, [pc, #100]	@ (8000af0 <prvAddNewTaskToReadyList+0x128>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	440b      	add	r3, r1
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000a9a:	1c59      	adds	r1, r3, #1
 8000a9c:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <prvAddNewTaskToReadyList+0x128>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4403      	add	r3, r0
 8000aa8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8000aaa:	f000 ff2d 	bl	8001908 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <prvAddNewTaskToReadyList+0x11c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00e      	beq.n	8000ad4 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <prvAddNewTaskToReadyList+0x118>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <prvAddNewTaskToReadyList+0x10c>
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <prvAddNewTaskToReadyList+0x12c>)
 8000ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	f3bf 8f4f 	dsb	sy
 8000ad0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000108 	.word	0x20000108
 8000ae0:	20000030 	.word	0x20000030
 8000ae4:	20000114 	.word	0x20000114
 8000ae8:	20000124 	.word	0x20000124
 8000aec:	20000110 	.word	0x20000110
 8000af0:	20000034 	.word	0x20000034
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d018      	beq.n	8000b3c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8000b0a:	f000 f8b3 	bl	8000c74 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <vTaskDelay+0x64>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d00b      	beq.n	8000b2e <vTaskDelay+0x36>
    __asm volatile
 8000b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b1a:	f383 8811 	msr	BASEPRI, r3
 8000b1e:	f3bf 8f6f 	isb	sy
 8000b22:	f3bf 8f4f 	dsb	sy
 8000b26:	60bb      	str	r3, [r7, #8]
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	e7fd      	b.n	8000b2a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b2e:	2100      	movs	r1, #0
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 fcb9 	bl	80014a8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000b36:	f000 f8ab 	bl	8000c90 <xTaskResumeAll>
 8000b3a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d107      	bne.n	8000b52 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <vTaskDelay+0x68>)
 8000b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	f3bf 8f4f 	dsb	sy
 8000b4e:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000130 	.word	0x20000130
 8000b60:	e000ed04 	.word	0xe000ed04

08000b64 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e011      	b.n	8000b9c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8000b78:	4a1c      	ldr	r2, [pc, #112]	@ (8000bec <prvCreateIdleTasks+0x88>)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	7819      	ldrb	r1, [r3, #0]
 8000b80:	1d3a      	adds	r2, r7, #4
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	4413      	add	r3, r2
 8000b86:	460a      	mov	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8000b8a:	1d3a      	adds	r2, r7, #4
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d006      	beq.n	8000ba4 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	2b09      	cmp	r3, #9
 8000ba0:	ddea      	ble.n	8000b78 <prvCreateIdleTasks+0x14>
 8000ba2:	e000      	b.n	8000ba6 <prvCreateIdleTasks+0x42>
        {
            break;
 8000ba4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	e015      	b.n	8000bd8 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <prvCreateIdleTasks+0x8c>)
 8000bae:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <prvCreateIdleTasks+0x90>)
 8000bb6:	4413      	add	r3, r2
 8000bb8:	1d39      	adds	r1, r7, #4
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	2282      	movs	r2, #130	@ 0x82
 8000bc4:	6938      	ldr	r0, [r7, #16]
 8000bc6:	f7ff fe4b 	bl	8000860 <xTaskCreate>
 8000bca:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d006      	beq.n	8000be0 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dde6      	ble.n	8000bac <prvCreateIdleTasks+0x48>
 8000bde:	e000      	b.n	8000be2 <prvCreateIdleTasks+0x7e>
        {
            break;
 8000be0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8000be2:	69fb      	ldr	r3, [r7, #28]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	08003410 	.word	0x08003410
 8000bf0:	08001345 	.word	0x08001345
 8000bf4:	2000012c 	.word	0x2000012c

08000bf8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8000bfe:	f7ff ffb1 	bl	8000b64 <prvCreateIdleTasks>
 8000c02:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d116      	bne.n	8000c38 <vTaskStartScheduler+0x40>
    __asm volatile
 8000c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c0e:	f383 8811 	msr	BASEPRI, r3
 8000c12:	f3bf 8f6f 	isb	sy
 8000c16:	f3bf 8f4f 	dsb	sy
 8000c1a:	60bb      	str	r3, [r7, #8]
}
 8000c1c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <vTaskStartScheduler+0x6c>)
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <vTaskStartScheduler+0x70>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <vTaskStartScheduler+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8000c32:	f000 fd47 	bl	80016c4 <xPortStartScheduler>
 8000c36:	e00f      	b.n	8000c58 <vTaskStartScheduler+0x60>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3e:	d10b      	bne.n	8000c58 <vTaskStartScheduler+0x60>
    __asm volatile
 8000c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c44:	f383 8811 	msr	BASEPRI, r3
 8000c48:	f3bf 8f6f 	isb	sy
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	607b      	str	r3, [r7, #4]
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <vTaskStartScheduler+0x78>)
 8000c5a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000128 	.word	0x20000128
 8000c68:	20000114 	.word	0x20000114
 8000c6c:	2000010c 	.word	0x2000010c
 8000c70:	20000000 	.word	0x20000000

08000c74 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <vTaskSuspendAll+0x18>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <vTaskSuspendAll+0x18>)
 8000c80:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20000130 	.word	0x20000130

08000c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8000c9e:	f000 fe01 	bl	80018a4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8000ca6:	4b75      	ldr	r3, [pc, #468]	@ (8000e7c <xTaskResumeAll+0x1ec>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10b      	bne.n	8000cc6 <xTaskResumeAll+0x36>
    __asm volatile
 8000cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cb2:	f383 8811 	msr	BASEPRI, r3
 8000cb6:	f3bf 8f6f 	isb	sy
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	603b      	str	r3, [r7, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	e7fd      	b.n	8000cc2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8000cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8000e7c <xTaskResumeAll+0x1ec>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8000e7c <xTaskResumeAll+0x1ec>)
 8000cce:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8000cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8000e7c <xTaskResumeAll+0x1ec>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 80ca 	bne.w	8000e6e <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000cda:	4b69      	ldr	r3, [pc, #420]	@ (8000e80 <xTaskResumeAll+0x1f0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 80c5 	beq.w	8000e6e <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ce4:	e08e      	b.n	8000e04 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000ce6:	4b67      	ldr	r3, [pc, #412]	@ (8000e84 <xTaskResumeAll+0x1f4>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	6a12      	ldr	r2, [r2, #32]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	69d2      	ldr	r2, [r2, #28]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	3318      	adds	r3, #24
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d103      	bne.n	8000d1c <xTaskResumeAll+0x8c>
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	6a1a      	ldr	r2, [r3, #32]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1e5a      	subs	r2, r3, #1
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	68d2      	ldr	r2, [r2, #12]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	69fa      	ldr	r2, [r7, #28]
 8000d42:	6892      	ldr	r2, [r2, #8]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d103      	bne.n	8000d5a <xTaskResumeAll+0xca>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	1e5a      	subs	r2, r3, #1
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6e:	2201      	movs	r2, #1
 8000d70:	409a      	lsls	r2, r3
 8000d72:	4b45      	ldr	r3, [pc, #276]	@ (8000e88 <xTaskResumeAll+0x1f8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	4a43      	ldr	r2, [pc, #268]	@ (8000e88 <xTaskResumeAll+0x1f8>)
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d80:	4942      	ldr	r1, [pc, #264]	@ (8000e8c <xTaskResumeAll+0x1fc>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	3204      	adds	r2, #4
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	1d1a      	adds	r2, r3, #4
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4a33      	ldr	r2, [pc, #204]	@ (8000e8c <xTaskResumeAll+0x1fc>)
 8000dc0:	441a      	add	r2, r3
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	615a      	str	r2, [r3, #20]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dca:	4930      	ldr	r1, [pc, #192]	@ (8000e8c <xTaskResumeAll+0x1fc>)
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000ddc:	1c59      	adds	r1, r3, #1
 8000dde:	482b      	ldr	r0, [pc, #172]	@ (8000e8c <xTaskResumeAll+0x1fc>)
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4403      	add	r3, r0
 8000dea:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <xTaskResumeAll+0x200>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d904      	bls.n	8000e04 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8000dfa:	4a26      	ldr	r2, [pc, #152]	@ (8000e94 <xTaskResumeAll+0x204>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e04:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <xTaskResumeAll+0x1f4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f47f af6c 	bne.w	8000ce6 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8000e14:	f000 fb2c 	bl	8001470 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <xTaskResumeAll+0x208>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d012      	beq.n	8000e4a <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8000e24:	f000 f83c 	bl	8000ea0 <xTaskIncrementTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d004      	beq.n	8000e38 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8000e2e:	4a19      	ldr	r2, [pc, #100]	@ (8000e94 <xTaskResumeAll+0x204>)
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	2101      	movs	r1, #1
 8000e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1ef      	bne.n	8000e24 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <xTaskResumeAll+0x208>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <xTaskResumeAll+0x204>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <xTaskResumeAll+0x200>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <xTaskResumeAll+0x20c>)
 8000e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	f3bf 8f4f 	dsb	sy
 8000e6a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8000e6e:	f000 fd4b 	bl	8001908 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8000e72:	69bb      	ldr	r3, [r7, #24]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000130 	.word	0x20000130
 8000e80:	20000108 	.word	0x20000108
 8000e84:	200000c8 	.word	0x200000c8
 8000e88:	20000110 	.word	0x20000110
 8000e8c:	20000034 	.word	0x20000034
 8000e90:	20000030 	.word	0x20000030
 8000e94:	2000011c 	.word	0x2000011c
 8000e98:	20000118 	.word	0x20000118
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8000eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80010a8 <xTaskIncrementTick+0x208>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 80ef 	bne.w	8001092 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000eb4:	4b7d      	ldr	r3, [pc, #500]	@ (80010ac <xTaskIncrementTick+0x20c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000ebc:	4a7b      	ldr	r2, [pc, #492]	@ (80010ac <xTaskIncrementTick+0x20c>)
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d121      	bne.n	8000f0c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000ec8:	4b79      	ldr	r3, [pc, #484]	@ (80010b0 <xTaskIncrementTick+0x210>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <xTaskIncrementTick+0x4a>
    __asm volatile
 8000ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ed6:	f383 8811 	msr	BASEPRI, r3
 8000eda:	f3bf 8f6f 	isb	sy
 8000ede:	f3bf 8f4f 	dsb	sy
 8000ee2:	607b      	str	r3, [r7, #4]
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	e7fd      	b.n	8000ee6 <xTaskIncrementTick+0x46>
 8000eea:	4b71      	ldr	r3, [pc, #452]	@ (80010b0 <xTaskIncrementTick+0x210>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	4b70      	ldr	r3, [pc, #448]	@ (80010b4 <xTaskIncrementTick+0x214>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80010b0 <xTaskIncrementTick+0x210>)
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80010b4 <xTaskIncrementTick+0x214>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b6e      	ldr	r3, [pc, #440]	@ (80010b8 <xTaskIncrementTick+0x218>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a6c      	ldr	r2, [pc, #432]	@ (80010b8 <xTaskIncrementTick+0x218>)
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	f000 fab2 	bl	8001470 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80010bc <xTaskIncrementTick+0x21c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6a3a      	ldr	r2, [r7, #32]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	f0c0 80a8 	bcc.w	8001068 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f18:	4b65      	ldr	r3, [pc, #404]	@ (80010b0 <xTaskIncrementTick+0x210>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d104      	bne.n	8000f2c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8000f22:	4b66      	ldr	r3, [pc, #408]	@ (80010bc <xTaskIncrementTick+0x21c>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	601a      	str	r2, [r3, #0]
                    break;
 8000f2a:	e09d      	b.n	8001068 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000f2c:	4b60      	ldr	r3, [pc, #384]	@ (80010b0 <xTaskIncrementTick+0x210>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000f3c:	6a3a      	ldr	r2, [r7, #32]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d203      	bcs.n	8000f4c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000f44:	4a5d      	ldr	r2, [pc, #372]	@ (80010bc <xTaskIncrementTick+0x21c>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	6013      	str	r3, [r2, #0]
                        break;
 8000f4a:	e08d      	b.n	8001068 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	68d2      	ldr	r2, [r2, #12]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	6892      	ldr	r2, [r2, #8]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d103      	bne.n	8000f7a <xTaskIncrementTick+0xda>
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01e      	beq.n	8000fd0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	6a12      	ldr	r2, [r2, #32]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	69d2      	ldr	r2, [r2, #28]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d103      	bne.n	8000fc0 <xTaskIncrementTick+0x120>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	4b39      	ldr	r3, [pc, #228]	@ (80010c0 <xTaskIncrementTick+0x220>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	4a38      	ldr	r2, [pc, #224]	@ (80010c0 <xTaskIncrementTick+0x220>)
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fe6:	4937      	ldr	r1, [pc, #220]	@ (80010c4 <xTaskIncrementTick+0x224>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	3204      	adds	r2, #4
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	1d1a      	adds	r2, r3, #4
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4a27      	ldr	r2, [pc, #156]	@ (80010c4 <xTaskIncrementTick+0x224>)
 8001026:	441a      	add	r2, r3
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001030:	4924      	ldr	r1, [pc, #144]	@ (80010c4 <xTaskIncrementTick+0x224>)
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001042:	1c59      	adds	r1, r3, #1
 8001044:	481f      	ldr	r0, [pc, #124]	@ (80010c4 <xTaskIncrementTick+0x224>)
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4403      	add	r3, r0
 8001050:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <xTaskIncrementTick+0x228>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105c:	429a      	cmp	r2, r3
 800105e:	f67f af5b 	bls.w	8000f18 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001062:	2301      	movs	r3, #1
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001066:	e757      	b.n	8000f18 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <xTaskIncrementTick+0x228>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800106e:	4915      	ldr	r1, [pc, #84]	@ (80010c4 <xTaskIncrementTick+0x224>)
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d901      	bls.n	8001084 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001080:	2301      	movs	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <xTaskIncrementTick+0x22c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d007      	beq.n	800109c <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 800108c:	2301      	movs	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001090:	e004      	b.n	800109c <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <xTaskIncrementTick+0x230>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <xTaskIncrementTick+0x230>)
 800109a:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000130 	.word	0x20000130
 80010ac:	2000010c 	.word	0x2000010c
 80010b0:	200000c0 	.word	0x200000c0
 80010b4:	200000c4 	.word	0x200000c4
 80010b8:	20000120 	.word	0x20000120
 80010bc:	20000128 	.word	0x20000128
 80010c0:	20000110 	.word	0x20000110
 80010c4:	20000034 	.word	0x20000034
 80010c8:	20000030 	.word	0x20000030
 80010cc:	2000011c 	.word	0x2000011c
 80010d0:	20000118 	.word	0x20000118

080010d4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <vTaskSwitchContext+0xa8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <vTaskSwitchContext+0xac>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80010e8:	e041      	b.n	800116e <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 80010ea:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <vTaskSwitchContext+0xac>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80010f0:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <vTaskSwitchContext+0xb0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	fab3 f383 	clz	r3, r3
 80010fc:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	f1c3 031f 	rsb	r3, r3, #31
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	4920      	ldr	r1, [pc, #128]	@ (8001188 <vTaskSwitchContext+0xb4>)
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10b      	bne.n	8001132 <vTaskSwitchContext+0x5e>
    __asm volatile
 800111a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800111e:	f383 8811 	msr	BASEPRI, r3
 8001122:	f3bf 8f6f 	isb	sy
 8001126:	f3bf 8f4f 	dsb	sy
 800112a:	607b      	str	r3, [r7, #4]
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	e7fd      	b.n	800112e <vTaskSwitchContext+0x5a>
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <vTaskSwitchContext+0xb4>)
 800113e:	4413      	add	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	3308      	adds	r3, #8
 8001154:	429a      	cmp	r2, r3
 8001156:	d103      	bne.n	8001160 <vTaskSwitchContext+0x8c>
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	4a09      	ldr	r2, [pc, #36]	@ (800118c <vTaskSwitchContext+0xb8>)
 8001168:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <vTaskSwitchContext+0xb8>)
 800116c:	681b      	ldr	r3, [r3, #0]
    }
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000130 	.word	0x20000130
 8001180:	2000011c 	.word	0x2000011c
 8001184:	20000110 	.word	0x20000110
 8001188:	20000034 	.word	0x20000034
 800118c:	20000030 	.word	0x20000030

08001190 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001190:	b480      	push	{r7}
 8001192:	b08b      	sub	sp, #44	@ 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10b      	bne.n	80011be <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80011a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	60fb      	str	r3, [r7, #12]
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	6a3a      	ldr	r2, [r7, #32]
 80011ca:	6a12      	ldr	r2, [r2, #32]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	6a3a      	ldr	r2, [r7, #32]
 80011d4:	69d2      	ldr	r2, [r2, #28]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	3318      	adds	r3, #24
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d103      	bne.n	80011ec <xTaskRemoveFromEventList+0x5c>
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	6a1a      	ldr	r2, [r3, #32]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1e5a      	subs	r2, r3, #1
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80011fc:	4b4b      	ldr	r3, [pc, #300]	@ (800132c <xTaskRemoveFromEventList+0x19c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d160      	bne.n	80012c6 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	6a3a      	ldr	r2, [r7, #32]
 8001210:	68d2      	ldr	r2, [r2, #12]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	6a3a      	ldr	r2, [r7, #32]
 800121a:	6892      	ldr	r2, [r2, #8]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	3304      	adds	r3, #4
 8001226:	429a      	cmp	r2, r3
 8001228:	d103      	bne.n	8001232 <xTaskRemoveFromEventList+0xa2>
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001246:	2201      	movs	r2, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <xTaskRemoveFromEventList+0x1a0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4313      	orrs	r3, r2
 8001250:	4a37      	ldr	r2, [pc, #220]	@ (8001330 <xTaskRemoveFromEventList+0x1a0>)
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001258:	4936      	ldr	r1, [pc, #216]	@ (8001334 <xTaskRemoveFromEventList+0x1a4>)
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	3304      	adds	r3, #4
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	6a3a      	ldr	r2, [r7, #32]
 800127e:	3204      	adds	r2, #4
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	1d1a      	adds	r2, r3, #4
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4a27      	ldr	r2, [pc, #156]	@ (8001334 <xTaskRemoveFromEventList+0x1a4>)
 8001298:	441a      	add	r2, r3
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a2:	4924      	ldr	r1, [pc, #144]	@ (8001334 <xTaskRemoveFromEventList+0x1a4>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6a3a      	ldr	r2, [r7, #32]
 80012b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012b4:	1c59      	adds	r1, r3, #1
 80012b6:	481f      	ldr	r0, [pc, #124]	@ (8001334 <xTaskRemoveFromEventList+0x1a4>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4403      	add	r3, r0
 80012c2:	6019      	str	r1, [r3, #0]
 80012c4:	e01b      	b.n	80012fe <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <xTaskRemoveFromEventList+0x1a8>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	61da      	str	r2, [r3, #28]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	621a      	str	r2, [r3, #32]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	6a3a      	ldr	r2, [r7, #32]
 80012e0:	3218      	adds	r2, #24
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f103 0218 	add.w	r2, r3, #24
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	4a11      	ldr	r2, [pc, #68]	@ (8001338 <xTaskRemoveFromEventList+0x1a8>)
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <xTaskRemoveFromEventList+0x1a8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <xTaskRemoveFromEventList+0x1a8>)
 80012fc:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <xTaskRemoveFromEventList+0x1ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	429a      	cmp	r2, r3
 800130a:	d905      	bls.n	8001318 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800130c:	2301      	movs	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <xTaskRemoveFromEventList+0x1b0>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e001      	b.n	800131c <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800131e:	4618      	mov	r0, r3
 8001320:	372c      	adds	r7, #44	@ 0x2c
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000130 	.word	0x20000130
 8001330:	20000110 	.word	0x20000110
 8001334:	20000034 	.word	0x20000034
 8001338:	200000c8 	.word	0x200000c8
 800133c:	20000030 	.word	0x20000030
 8001340:	2000011c 	.word	0x2000011c

08001344 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800134c:	f000 f852 	bl	80013f4 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <prvIdleTask+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d9f9      	bls.n	800134c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <prvIdleTask+0x2c>)
 800135a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f3bf 8f4f 	dsb	sy
 8001364:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001368:	e7f0      	b.n	800134c <prvIdleTask+0x8>
 800136a:	bf00      	nop
 800136c:	20000034 	.word	0x20000034
 8001370:	e000ed04 	.word	0xe000ed04

08001374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	e00c      	b.n	800139a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <prvInitialiseTaskLists+0x60>)
 800138c:	4413      	add	r3, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f896 	bl	80004c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3301      	adds	r3, #1
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d9ef      	bls.n	8001380 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80013a0:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <prvInitialiseTaskLists+0x64>)
 80013a2:	f7ff f88d 	bl	80004c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80013a6:	480d      	ldr	r0, [pc, #52]	@ (80013dc <prvInitialiseTaskLists+0x68>)
 80013a8:	f7ff f88a 	bl	80004c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <prvInitialiseTaskLists+0x6c>)
 80013ae:	f7ff f887 	bl	80004c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80013b2:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <prvInitialiseTaskLists+0x70>)
 80013b4:	f7ff f884 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <prvInitialiseTaskLists+0x74>)
 80013ba:	f7ff f881 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <prvInitialiseTaskLists+0x78>)
 80013c0:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <prvInitialiseTaskLists+0x64>)
 80013c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <prvInitialiseTaskLists+0x7c>)
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <prvInitialiseTaskLists+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000034 	.word	0x20000034
 80013d8:	20000098 	.word	0x20000098
 80013dc:	200000ac 	.word	0x200000ac
 80013e0:	200000c8 	.word	0x200000c8
 80013e4:	200000dc 	.word	0x200000dc
 80013e8:	200000f4 	.word	0x200000f4
 80013ec:	200000c0 	.word	0x200000c0
 80013f0:	200000c4 	.word	0x200000c4

080013f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013fa:	e019      	b.n	8001430 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80013fc:	f000 fa52 	bl	80018a4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <prvCheckTasksWaitingTermination+0x50>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3304      	adds	r3, #4
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f8bd 	bl	800058c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <prvCheckTasksWaitingTermination+0x54>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3b01      	subs	r3, #1
 8001418:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <prvCheckTasksWaitingTermination+0x54>)
 800141a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <prvCheckTasksWaitingTermination+0x58>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <prvCheckTasksWaitingTermination+0x58>)
 8001424:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001426:	f000 fa6f 	bl	8001908 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f810 	bl	8001450 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <prvCheckTasksWaitingTermination+0x58>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e1      	bne.n	80013fc <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200000dc 	.word	0x200000dc
 8001448:	20000108 	.word	0x20000108
 800144c:	200000f0 	.word	0x200000f0

08001450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fb51 	bl	8001b04 <vPortFree>
            vPortFree( pxTCB );
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fb4e 	bl	8001b04 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <prvResetNextTaskUnblockTime+0x30>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d104      	bne.n	8001488 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <prvResetNextTaskUnblockTime+0x34>)
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001486:	e005      	b.n	8001494 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <prvResetNextTaskUnblockTime+0x30>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <prvResetNextTaskUnblockTime+0x34>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	200000c0 	.word	0x200000c0
 80014a4:	20000128 	.word	0x20000128

080014a8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80014b2:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80014b8:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <prvAddCurrentTaskToDelayedList+0xec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80014be:	4b36      	ldr	r3, [pc, #216]	@ (8001598 <prvAddCurrentTaskToDelayedList+0xf0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80014c4:	4b35      	ldr	r3, [pc, #212]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3304      	adds	r3, #4
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f85e 	bl	800058c <uxListRemove>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10b      	bne.n	80014ee <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014dc:	2201      	movs	r2, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	4b2e      	ldr	r3, [pc, #184]	@ (80015a0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4013      	ands	r3, r2
 80014ea:	4a2d      	ldr	r2, [pc, #180]	@ (80015a0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80014ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d124      	bne.n	8001540 <prvAddCurrentTaskToDelayedList+0x98>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d021      	beq.n	8001540 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80014fc:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	6892      	ldr	r2, [r2, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	3204      	adds	r2, #4
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1d1a      	adds	r2, r3, #4
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001530:	615a      	str	r2, [r3, #20]
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	4a1a      	ldr	r2, [pc, #104]	@ (80015a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800153e:	e022      	b.n	8001586 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3304      	adds	r3, #4
 800155e:	4619      	mov	r1, r3
 8001560:	6978      	ldr	r0, [r7, #20]
 8001562:	f7fe ffda 	bl	800051a <vListInsert>
}
 8001566:	e00e      	b.n	8001586 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <prvAddCurrentTaskToDelayedList+0xf4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3304      	adds	r3, #4
 800156e:	4619      	mov	r1, r3
 8001570:	69b8      	ldr	r0, [r7, #24]
 8001572:	f7fe ffd2 	bl	800051a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <prvAddCurrentTaskToDelayedList+0x100>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d202      	bcs.n	8001586 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8001580:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <prvAddCurrentTaskToDelayedList+0x100>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000010c 	.word	0x2000010c
 8001594:	200000c0 	.word	0x200000c0
 8001598:	200000c4 	.word	0x200000c4
 800159c:	20000030 	.word	0x20000030
 80015a0:	20000110 	.word	0x20000110
 80015a4:	200000f4 	.word	0x200000f4
 80015a8:	20000128 	.word	0x20000128

080015ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3b04      	subs	r3, #4
 80015bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3b04      	subs	r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f023 0201 	bic.w	r2, r3, #1
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3b04      	subs	r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80015dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001610 <pxPortInitialiseStack+0x64>)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3b14      	subs	r3, #20
 80015e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3b04      	subs	r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f06f 0202 	mvn.w	r2, #2
 80015fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3b20      	subs	r3, #32
 8001600:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	08001615 	.word	0x08001615

08001614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800161e:	4b13      	ldr	r3, [pc, #76]	@ (800166c <prvTaskExitError+0x58>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001626:	d00b      	beq.n	8001640 <prvTaskExitError+0x2c>
    __asm volatile
 8001628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800162c:	f383 8811 	msr	BASEPRI, r3
 8001630:	f3bf 8f6f 	isb	sy
 8001634:	f3bf 8f4f 	dsb	sy
 8001638:	60fb      	str	r3, [r7, #12]
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <prvTaskExitError+0x28>
    __asm volatile
 8001640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	60bb      	str	r3, [r7, #8]
}
 8001652:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001654:	bf00      	nop
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0fc      	beq.n	8001656 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000004 	.word	0x20000004

08001670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001670:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <pxCurrentTCBConst2>)
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	6808      	ldr	r0, [r1, #0]
 8001676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800167a:	f380 8809 	msr	PSP, r0
 800167e:	f3bf 8f6f 	isb	sy
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f380 8811 	msr	BASEPRI, r0
 800168a:	4770      	bx	lr
 800168c:	f3af 8000 	nop.w

08001690 <pxCurrentTCBConst2>:
 8001690:	20000030 	.word	0x20000030
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop

08001698 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001698:	4808      	ldr	r0, [pc, #32]	@ (80016bc <prvPortStartFirstTask+0x24>)
 800169a:	6800      	ldr	r0, [r0, #0]
 800169c:	6800      	ldr	r0, [r0, #0]
 800169e:	f380 8808 	msr	MSP, r0
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f380 8814 	msr	CONTROL, r0
 80016aa:	b662      	cpsie	i
 80016ac:	b661      	cpsie	f
 80016ae:	f3bf 8f4f 	dsb	sy
 80016b2:	f3bf 8f6f 	isb	sy
 80016b6:	df00      	svc	0
 80016b8:	bf00      	nop
 80016ba:	0000      	.short	0x0000
 80016bc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop

080016c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	@ 0x30
 80016c8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80016ca:	4b69      	ldr	r3, [pc, #420]	@ (8001870 <xPortStartScheduler+0x1ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a69      	ldr	r2, [pc, #420]	@ (8001874 <xPortStartScheduler+0x1b0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d10b      	bne.n	80016ec <xPortStartScheduler+0x28>
    __asm volatile
 80016d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016d8:	f383 8811 	msr	BASEPRI, r3
 80016dc:	f3bf 8f6f 	isb	sy
 80016e0:	f3bf 8f4f 	dsb	sy
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80016ec:	4b60      	ldr	r3, [pc, #384]	@ (8001870 <xPortStartScheduler+0x1ac>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a61      	ldr	r2, [pc, #388]	@ (8001878 <xPortStartScheduler+0x1b4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10b      	bne.n	800170e <xPortStartScheduler+0x4a>
    __asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	623b      	str	r3, [r7, #32]
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	e7fd      	b.n	800170a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800170e:	4b5b      	ldr	r3, [pc, #364]	@ (800187c <xPortStartScheduler+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8001714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001716:	332c      	adds	r3, #44	@ 0x2c
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a59      	ldr	r2, [pc, #356]	@ (8001880 <xPortStartScheduler+0x1bc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d00b      	beq.n	8001738 <xPortStartScheduler+0x74>
    __asm volatile
 8001720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
 8001730:	61fb      	str	r3, [r7, #28]
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8001738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173a:	3338      	adds	r3, #56	@ 0x38
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a51      	ldr	r2, [pc, #324]	@ (8001884 <xPortStartScheduler+0x1c0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00b      	beq.n	800175c <xPortStartScheduler+0x98>
    __asm volatile
 8001744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001748:	f383 8811 	msr	BASEPRI, r3
 800174c:	f3bf 8f6f 	isb	sy
 8001750:	f3bf 8f4f 	dsb	sy
 8001754:	61bb      	str	r3, [r7, #24]
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001760:	4b49      	ldr	r3, [pc, #292]	@ (8001888 <xPortStartScheduler+0x1c4>)
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8001764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800176c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176e:	22ff      	movs	r2, #255	@ 0xff
 8001770:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b41      	ldr	r3, [pc, #260]	@ (800188c <xPortStartScheduler+0x1c8>)
 8001786:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8001788:	4b40      	ldr	r3, [pc, #256]	@ (800188c <xPortStartScheduler+0x1c8>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10b      	bne.n	80017a8 <xPortStartScheduler+0xe4>
    __asm volatile
 8001790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001794:	f383 8811 	msr	BASEPRI, r3
 8001798:	f3bf 8f6f 	isb	sy
 800179c:	f3bf 8f4f 	dsb	sy
 80017a0:	617b      	str	r3, [r7, #20]
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d013      	beq.n	80017de <xPortStartScheduler+0x11a>
    __asm volatile
 80017b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017ba:	f383 8811 	msr	BASEPRI, r3
 80017be:	f3bf 8f6f 	isb	sy
 80017c2:	f3bf 8f4f 	dsb	sy
 80017c6:	613b      	str	r3, [r7, #16]
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	e7fd      	b.n	80017ca <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3301      	adds	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	2b80      	cmp	r3, #128	@ 0x80
 80017e8:	d0f1      	beq.n	80017ce <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d103      	bne.n	80017f8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80017f0:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <xPortStartScheduler+0x1cc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e004      	b.n	8001802 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	4a24      	ldr	r2, [pc, #144]	@ (8001890 <xPortStartScheduler+0x1cc>)
 8001800:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <xPortStartScheduler+0x1cc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <xPortStartScheduler+0x1cc>)
 800180a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800180c:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <xPortStartScheduler+0x1cc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001814:	4a1e      	ldr	r2, [pc, #120]	@ (8001890 <xPortStartScheduler+0x1cc>)
 8001816:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <xPortStartScheduler+0x1d0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <xPortStartScheduler+0x1d0>)
 8001826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800182a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <xPortStartScheduler+0x1d0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a18      	ldr	r2, [pc, #96]	@ (8001894 <xPortStartScheduler+0x1d0>)
 8001832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001836:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <xPortStartScheduler+0x1d4>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800183e:	f000 f8e5 	bl	8001a0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001842:	4b16      	ldr	r3, [pc, #88]	@ (800189c <xPortStartScheduler+0x1d8>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001848:	f000 f8fc 	bl	8001a44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <xPortStartScheduler+0x1dc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a13      	ldr	r2, [pc, #76]	@ (80018a0 <xPortStartScheduler+0x1dc>)
 8001852:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001856:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001858:	f7ff ff1e 	bl	8001698 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800185c:	f7ff fc3a 	bl	80010d4 <vTaskSwitchContext>
    prvTaskExitError();
 8001860:	f7ff fed8 	bl	8001614 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3730      	adds	r7, #48	@ 0x30
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	410fc271 	.word	0x410fc271
 8001878:	410fc270 	.word	0x410fc270
 800187c:	e000ed08 	.word	0xe000ed08
 8001880:	08001671 	.word	0x08001671
 8001884:	08001961 	.word	0x08001961
 8001888:	e000e400 	.word	0xe000e400
 800188c:	20000134 	.word	0x20000134
 8001890:	20000138 	.word	0x20000138
 8001894:	e000ed20 	.word	0xe000ed20
 8001898:	e000ed1c 	.word	0xe000ed1c
 800189c:	20000004 	.word	0x20000004
 80018a0:	e000ef34 	.word	0xe000ef34

080018a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
    __asm volatile
 80018aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ae:	f383 8811 	msr	BASEPRI, r3
 80018b2:	f3bf 8f6f 	isb	sy
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	607b      	str	r3, [r7, #4]
}
 80018bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <vPortEnterCritical+0x5c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001900 <vPortEnterCritical+0x5c>)
 80018c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80018c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <vPortEnterCritical+0x5c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d110      	bne.n	80018f2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <vPortEnterCritical+0x60>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <vPortEnterCritical+0x4e>
    __asm volatile
 80018da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018de:	f383 8811 	msr	BASEPRI, r3
 80018e2:	f3bf 8f6f 	isb	sy
 80018e6:	f3bf 8f4f 	dsb	sy
 80018ea:	603b      	str	r3, [r7, #0]
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	e7fd      	b.n	80018ee <vPortEnterCritical+0x4a>
    }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000004 	.word	0x20000004
 8001904:	e000ed04 	.word	0xe000ed04

08001908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <vPortExitCritical+0x50>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10b      	bne.n	800192e <vPortExitCritical+0x26>
    __asm volatile
 8001916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800191a:	f383 8811 	msr	BASEPRI, r3
 800191e:	f3bf 8f6f 	isb	sy
 8001922:	f3bf 8f4f 	dsb	sy
 8001926:	607b      	str	r3, [r7, #4]
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	e7fd      	b.n	800192a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <vPortExitCritical+0x50>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3b01      	subs	r3, #1
 8001934:	4a08      	ldr	r2, [pc, #32]	@ (8001958 <vPortExitCritical+0x50>)
 8001936:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <vPortExitCritical+0x50>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <vPortExitCritical+0x44>
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800194a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	20000004 	.word	0x20000004
 800195c:	00000000 	.word	0x00000000

08001960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001960:	f3ef 8009 	mrs	r0, PSP
 8001964:	f3bf 8f6f 	isb	sy
 8001968:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <pxCurrentTCBConst>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f01e 0f10 	tst.w	lr, #16
 8001970:	bf08      	it	eq
 8001972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800197a:	6010      	str	r0, [r2, #0]
 800197c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001984:	f380 8811 	msr	BASEPRI, r0
 8001988:	f3bf 8f4f 	dsb	sy
 800198c:	f3bf 8f6f 	isb	sy
 8001990:	f7ff fba0 	bl	80010d4 <vTaskSwitchContext>
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f380 8811 	msr	BASEPRI, r0
 800199c:	bc09      	pop	{r0, r3}
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	6808      	ldr	r0, [r1, #0]
 80019a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a6:	f01e 0f10 	tst.w	lr, #16
 80019aa:	bf08      	it	eq
 80019ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80019b0:	f380 8809 	msr	PSP, r0
 80019b4:	f3bf 8f6f 	isb	sy
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	f3af 8000 	nop.w

080019c0 <pxCurrentTCBConst>:
 80019c0:	20000030 	.word	0x20000030
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop

080019c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
    __asm volatile
 80019ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019d2:	f383 8811 	msr	BASEPRI, r3
 80019d6:	f3bf 8f6f 	isb	sy
 80019da:	f3bf 8f4f 	dsb	sy
 80019de:	607b      	str	r3, [r7, #4]
}
 80019e0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80019e2:	f7ff fa5d 	bl	8000ea0 <xTaskIncrementTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <SysTick_Handler+0x40>)
 80019ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f383 8811 	msr	BASEPRI, r3
}
 80019fe:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	e000ed04 	.word	0xe000ed04

08001a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <vPortSetupTimerInterrupt+0x28>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001a16:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <vPortSetupTimerInterrupt+0x2c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <vPortSetupTimerInterrupt+0x30>)
 8001a1e:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <vPortSetupTimerInterrupt+0x34>)
 8001a20:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <vPortSetupTimerInterrupt+0x28>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010
 8001a38:	e000e018 	.word	0xe000e018
 8001a3c:	e000e014 	.word	0xe000e014
 8001a40:	0002903f 	.word	0x0002903f

08001a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001a54 <vPortEnableVFP+0x10>
 8001a48:	6801      	ldr	r1, [r0, #0]
 8001a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8001a4e:	6001      	str	r1, [r0, #0]
 8001a50:	4770      	bx	lr
 8001a52:	0000      	.short	0x0000
 8001a54:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop

08001a5c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00e      	beq.n	8001a90 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f023 0307 	bic.w	r3, r3, #7
 8001a78:	3308      	adds	r3, #8
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d205      	bcs.n	8001a8c <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	3308      	adds	r3, #8
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	e001      	b.n	8001a90 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8001a90:	f7ff f8f0 	bl	8000c74 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <pvPortMalloc+0x98>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <pvPortMalloc+0x9c>)
 8001a9e:	f023 0307 	bic.w	r3, r3, #7
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <pvPortMalloc+0x98>)
 8001aa6:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d01a      	beq.n	8001ae4 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <pvPortMalloc+0xa0>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <pvPortMalloc+0xa4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d813      	bhi.n	8001ae4 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <pvPortMalloc+0xa0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	441a      	add	r2, r3
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <pvPortMalloc+0xa0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d90b      	bls.n	8001ae4 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <pvPortMalloc+0x98>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <pvPortMalloc+0xa0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <pvPortMalloc+0xa0>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a06      	ldr	r2, [pc, #24]	@ (8001afc <pvPortMalloc+0xa0>)
 8001ae2:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001ae4:	f7ff f8d4 	bl	8000c90 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20012d40 	.word	0x20012d40
 8001af8:	20000143 	.word	0x20000143
 8001afc:	20012d3c 	.word	0x20012d3c
 8001b00:	00012bf7 	.word	0x00012bf7

08001b04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <vPortFree+0x26>
    __asm volatile
 8001b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b16:	f383 8811 	msr	BASEPRI, r3
 8001b1a:	f3bf 8f6f 	isb	sy
 8001b1e:	f3bf 8f4f 	dsb	sy
 8001b22:	60fb      	str	r3, [r7, #12]
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	e7fd      	b.n	8001b26 <vPortFree+0x22>
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b3e:	f000 fa23 	bl	8001f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b42:	f000 f83d 	bl	8001bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b46:	f000 f899 	bl	8001c7c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  const TickType_t xTimerPeriod = mainTIMER_SEND_FREQUENCY_MS;
 8001b4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b4e:	607b      	str	r3, [r7, #4]

    	/* Create the queue. */
    	xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( uint32_t ) );
 8001b50:	2200      	movs	r2, #0
 8001b52:	2104      	movs	r1, #4
 8001b54:	2002      	movs	r0, #2
 8001b56:	f7fe fdd5 	bl	8000704 <xQueueGenericCreate>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <main+0x70>)
 8001b5e:	6013      	str	r3, [r2, #0]
      /* USER CODE BEGIN 1 */
    	if( xQueue != NULL )
 8001b60:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <main+0x70>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d016      	beq.n	8001b96 <main+0x5e>
    		{
  		xTaskCreate( prvStartDefaultTask,			/* The function that implements the task. */
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2300      	movs	r3, #0
 8001b72:	2282      	movs	r2, #130	@ 0x82
 8001b74:	490d      	ldr	r1, [pc, #52]	@ (8001bac <main+0x74>)
 8001b76:	480e      	ldr	r0, [pc, #56]	@ (8001bb0 <main+0x78>)
 8001b78:	f7fe fe72 	bl	8000860 <xTaskCreate>
  							configMINIMAL_STACK_SIZE, 		/* The size of the stack to allocate to the task. */
  							NULL, 							/* The parameter passed to the task - not used in this simple case. */
  							mainONE_LEDTASK_PRIORITY,/* The priority assigned to the task. */
  							NULL );							/* The task handle is not required, so NULL is passed. */

  		xTaskCreate( prvStartTask02, "Other LED", configMINIMAL_STACK_SIZE, NULL, mainOTHER_LED_TASK_PRIORITY, NULL );
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2301      	movs	r3, #1
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2300      	movs	r3, #0
 8001b86:	2282      	movs	r2, #130	@ 0x82
 8001b88:	490a      	ldr	r1, [pc, #40]	@ (8001bb4 <main+0x7c>)
 8001b8a:	480b      	ldr	r0, [pc, #44]	@ (8001bb8 <main+0x80>)
 8001b8c:	f7fe fe68 	bl	8000860 <xTaskCreate>
//  		if( xTimer != NULL )
//  				{
//  					xTimerStart( xTimer, 0 );
//  				}
  //	  /* Start the scheduler so the tasks start executing. */
  	  vTaskStartScheduler();
 8001b90:	f7ff f832 	bl	8000bf8 <vTaskStartScheduler>
 8001b94:	e005      	b.n	8001ba2 <main+0x6a>
  	}
  	else
  	{
  		//throw led if queue can't be created.. debug led
  		HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12 );
 8001b96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b9a:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <main+0x84>)
 8001b9c:	f000 fccd 	bl	800253a <HAL_GPIO_TogglePin>
  	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	e7fd      	b.n	8001ba2 <main+0x6a>
 8001ba6:	bf00      	nop
 8001ba8:	20012d44 	.word	0x20012d44
 8001bac:	08003418 	.word	0x08003418
 8001bb0:	08001d21 	.word	0x08001d21
 8001bb4:	08003420 	.word	0x08003420
 8001bb8:	08001d41 	.word	0x08001d41
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b094      	sub	sp, #80	@ 0x50
 8001bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2230      	movs	r2, #48	@ 0x30
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 fbe6 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <SystemClock_Config+0xb4>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <SystemClock_Config+0xb4>)
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <SystemClock_Config+0xb4>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <SystemClock_Config+0xb8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1b      	ldr	r2, [pc, #108]	@ (8001c78 <SystemClock_Config+0xb8>)
 8001c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <SystemClock_Config+0xb8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c24:	2310      	movs	r3, #16
 8001c26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fc9d 	bl	8002570 <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c3c:	f000 f8a2 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c40:	230f      	movs	r3, #15
 8001c42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 ff00 	bl	8002a60 <HAL_RCC_ClockConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001c66:	f000 f88d 	bl	8001d84 <Error_Handler>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3750      	adds	r7, #80	@ 0x50
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000

08001c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <MX_GPIO_Init+0x98>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d14 <MX_GPIO_Init+0x98>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <MX_GPIO_Init+0x98>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <MX_GPIO_Init+0x98>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <MX_GPIO_Init+0x98>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <MX_GPIO_Init+0x98>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|orange_led_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001cd0:	4811      	ldr	r0, [pc, #68]	@ (8001d18 <MX_GPIO_Init+0x9c>)
 8001cd2:	f000 fc19 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <MX_GPIO_Init+0xa0>)
 8001cea:	f000 fa71 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 orange_led_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|orange_led_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001cee:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_GPIO_Init+0x9c>)
 8001d08:	f000 fa62 	bl	80021d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d0c:	bf00      	nop
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40020000 	.word	0x40020000

08001d20 <prvStartDefaultTask>:

/* USER CODE BEGIN 4 */
static void prvStartDefaultTask(void  * argument)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8001d28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d2c:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <prvStartDefaultTask+0x1c>)
 8001d2e:	f000 fc04 	bl	800253a <HAL_GPIO_TogglePin>

	  vTaskDelay(250);
 8001d32:	20fa      	movs	r0, #250	@ 0xfa
 8001d34:	f7fe fee0 	bl	8000af8 <vTaskDelay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8001d38:	bf00      	nop
 8001d3a:	e7f5      	b.n	8001d28 <prvStartDefaultTask+0x8>
 8001d3c:	40020c00 	.word	0x40020c00

08001d40 <prvStartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
static void prvStartTask02(void  * argument)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8001d48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d4c:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <prvStartTask02+0x1c>)
 8001d4e:	f000 fbf4 	bl	800253a <HAL_GPIO_TogglePin>
    vTaskDelay(100);
 8001d52:	2064      	movs	r0, #100	@ 0x64
 8001d54:	f7fe fed0 	bl	8000af8 <vTaskDelay>
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8001d58:	bf00      	nop
 8001d5a:	e7f5      	b.n	8001d48 <prvStartTask02+0x8>
 8001d5c:	40020c00 	.word	0x40020c00

08001d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d72:	f000 f92b 	bl	8001fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40010000 	.word	0x40010000

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <Error_Handler+0x8>

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <HAL_MspInit+0x4c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001ddc <HAL_MspInit+0x4c>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_MspInit+0x4c>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	4a08      	ldr	r2, [pc, #32]	@ (8001ddc <HAL_MspInit+0x4c>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	@ 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df8:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e00:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e0c:	f107 020c 	add.w	r2, r7, #12
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 ffee 	bl	8002df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e1c:	f000 ffd8 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8001e20:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e24:	4a23      	ldr	r2, [pc, #140]	@ (8001eb4 <HAL_InitTick+0xd4>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9b      	lsrs	r3, r3, #18
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e30:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <HAL_InitTick+0xd8>)
 8001e32:	4a22      	ldr	r2, [pc, #136]	@ (8001ebc <HAL_InitTick+0xdc>)
 8001e34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_InitTick+0xd8>)
 8001e38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb8 <HAL_InitTick+0xd8>)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e44:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb8 <HAL_InitTick+0xd8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <HAL_InitTick+0xd8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_InitTick+0xd8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e56:	4818      	ldr	r0, [pc, #96]	@ (8001eb8 <HAL_InitTick+0xd8>)
 8001e58:	f001 f800 	bl	8002e5c <HAL_TIM_Base_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d11b      	bne.n	8001ea2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e6a:	4813      	ldr	r0, [pc, #76]	@ (8001eb8 <HAL_InitTick+0xd8>)
 8001e6c:	f001 f850 	bl	8002f10 <HAL_TIM_Base_Start_IT>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d111      	bne.n	8001ea2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e7e:	2019      	movs	r0, #25
 8001e80:	f000 f998 	bl	80021b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b0f      	cmp	r3, #15
 8001e88:	d808      	bhi.n	8001e9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	2019      	movs	r0, #25
 8001e90:	f000 f974 	bl	800217c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_InitTick+0xe0>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e002      	b.n	8001ea2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3730      	adds	r7, #48	@ 0x30
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	431bde83 	.word	0x431bde83
 8001eb8:	20012d48 	.word	0x20012d48
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <NMI_Handler+0x4>

08001ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <HardFault_Handler+0x4>

08001ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <MemManage_Handler+0x4>

08001edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f02:	f001 f875 	bl	8002ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20012d48 	.word	0x20012d48

08001f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <SystemInit+0x20>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <SystemInit+0x20>)
 8001f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f38:	f7ff ffea 	bl	8001f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f3e:	490d      	ldr	r1, [pc, #52]	@ (8001f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f54:	4c0a      	ldr	r4, [pc, #40]	@ (8001f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f62:	f001 fa25 	bl	80033b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f66:	f7ff fde7 	bl	8001b38 <main>
  bx  lr    
 8001f6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f74:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001f78:	08003454 	.word	0x08003454
  ldr r2, =_sbss
 8001f7c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001f80:	20012d94 	.word	0x20012d94

08001f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC_IRQHandler>
	...

08001f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <HAL_Init+0x40>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc8 <HAL_Init+0x40>)
 8001f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <HAL_Init+0x40>)
 8001f9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a07      	ldr	r2, [pc, #28]	@ (8001fc8 <HAL_Init+0x40>)
 8001faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 f8d8 	bl	8002166 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb6:	200f      	movs	r0, #15
 8001fb8:	f7ff ff12 	bl	8001de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fbc:	f7ff fee8 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023c00 	.word	0x40023c00

08001fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_IncTick+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_IncTick+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <HAL_IncTick+0x24>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000010 	.word	0x20000010
 8001ff0:	20012d90 	.word	0x20012d90

08001ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_GetTick+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20012d90 	.word	0x20012d90

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	@ (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	@ (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	@ (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	@ 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff4c 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800218e:	f7ff ff61 	bl	8002054 <__NVIC_GetPriorityGrouping>
 8002192:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68b9      	ldr	r1, [r7, #8]
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f7ff ffb1 	bl	8002100 <NVIC_EncodePriority>
 800219e:	4602      	mov	r2, r0
 80021a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff80 	bl	80020ac <__NVIC_SetPriority>
}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff54 	bl	8002070 <__NVIC_EnableIRQ>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	@ 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e16b      	b.n	80024c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 815a 	bne.w	80024be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d005      	beq.n	8002222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	2b02      	cmp	r3, #2
 8002220:	d130      	bne.n	8002284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b03      	cmp	r3, #3
 800228e:	d017      	beq.n	80022c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80b4 	beq.w	80024be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b60      	ldr	r3, [pc, #384]	@ (80024dc <HAL_GPIO_Init+0x30c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	4a5f      	ldr	r2, [pc, #380]	@ (80024dc <HAL_GPIO_Init+0x30c>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002364:	6453      	str	r3, [r2, #68]	@ 0x44
 8002366:	4b5d      	ldr	r3, [pc, #372]	@ (80024dc <HAL_GPIO_Init+0x30c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a5b      	ldr	r2, [pc, #364]	@ (80024e0 <HAL_GPIO_Init+0x310>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_GPIO_Init+0x314>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02b      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a51      	ldr	r2, [pc, #324]	@ (80024e8 <HAL_GPIO_Init+0x318>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d025      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a50      	ldr	r2, [pc, #320]	@ (80024ec <HAL_GPIO_Init+0x31c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	@ (80024f0 <HAL_GPIO_Init+0x320>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x21a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4e      	ldr	r2, [pc, #312]	@ (80024f4 <HAL_GPIO_Init+0x324>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x216>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4d      	ldr	r2, [pc, #308]	@ (80024f8 <HAL_GPIO_Init+0x328>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x212>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	@ (80024fc <HAL_GPIO_Init+0x32c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x20e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002500 <HAL_GPIO_Init+0x330>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x20a>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00e      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023da:	2308      	movs	r3, #8
 80023dc:	e00c      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00a      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023e2:	2305      	movs	r3, #5
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	@ (80024e0 <HAL_GPIO_Init+0x310>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <HAL_GPIO_Init+0x334>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a32      	ldr	r2, [pc, #200]	@ (8002504 <HAL_GPIO_Init+0x334>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <HAL_GPIO_Init+0x334>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a27      	ldr	r2, [pc, #156]	@ (8002504 <HAL_GPIO_Init+0x334>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246a:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_GPIO_Init+0x334>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248e:	4a1d      	ldr	r2, [pc, #116]	@ (8002504 <HAL_GPIO_Init+0x334>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <HAL_GPIO_Init+0x334>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b8:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <HAL_GPIO_Init+0x334>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f ae90 	bls.w	80021ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800
 8002500:	40021c00 	.word	0x40021c00
 8002504:	40013c00 	.word	0x40013c00

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002524:	e003      	b.n	800252e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	041a      	lsls	r2, r3, #16
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43d9      	mvns	r1, r3
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	400b      	ands	r3, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e267      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d075      	beq.n	800267a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800258e:	4b88      	ldr	r3, [pc, #544]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259a:	4b85      	ldr	r3, [pc, #532]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d112      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a6:	4b82      	ldr	r3, [pc, #520]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025b2:	d10b      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	4b7e      	ldr	r3, [pc, #504]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d05b      	beq.n	8002678 <HAL_RCC_OscConfig+0x108>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d157      	bne.n	8002678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e242      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d4:	d106      	bne.n	80025e4 <HAL_RCC_OscConfig+0x74>
 80025d6:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a75      	ldr	r2, [pc, #468]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x98>
 80025ee:	4b70      	ldr	r3, [pc, #448]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6f      	ldr	r2, [pc, #444]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b6d      	ldr	r3, [pc, #436]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6c      	ldr	r2, [pc, #432]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 8002608:	4b69      	ldr	r3, [pc, #420]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a68      	ldr	r2, [pc, #416]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b66      	ldr	r3, [pc, #408]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a65      	ldr	r2, [pc, #404]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff fce4 	bl	8001ff4 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7ff fce0 	bl	8001ff4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	@ 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e207      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b5b      	ldr	r3, [pc, #364]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xc0>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff fcd0 	bl	8001ff4 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7ff fccc 	bl	8001ff4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	@ 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1f3      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	4b51      	ldr	r3, [pc, #324]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0xe8>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002686:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b47      	ldr	r3, [pc, #284]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800269a:	2b08      	cmp	r3, #8
 800269c:	d11c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269e:	4b44      	ldr	r3, [pc, #272]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1c7      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b3b      	ldr	r3, [pc, #236]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4937      	ldr	r1, [pc, #220]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e03a      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b34      	ldr	r3, [pc, #208]	@ (80027b4 <HAL_RCC_OscConfig+0x244>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7ff fc85 	bl	8001ff4 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7ff fc81 	bl	8001ff4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1a8      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b28      	ldr	r3, [pc, #160]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4925      	ldr	r1, [pc, #148]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <HAL_RCC_OscConfig+0x244>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7ff fc64 	bl	8001ff4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002730:	f7ff fc60 	bl	8001ff4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e187      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d036      	beq.n	80027c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <HAL_RCC_OscConfig+0x248>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7ff fc44 	bl	8001ff4 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7ff fc40 	bl	8001ff4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e167      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x200>
 800278e:	e01b      	b.n	80027c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002790:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_OscConfig+0x248>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7ff fc2d 	bl	8001ff4 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	e00e      	b.n	80027bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279e:	f7ff fc29 	bl	8001ff4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d907      	bls.n	80027bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e150      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	42470000 	.word	0x42470000
 80027b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	4b88      	ldr	r3, [pc, #544]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ea      	bne.n	800279e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8097 	beq.w	8002904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027da:	4b81      	ldr	r3, [pc, #516]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b7d      	ldr	r3, [pc, #500]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	4a7c      	ldr	r2, [pc, #496]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f6:	4b7a      	ldr	r3, [pc, #488]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b77      	ldr	r3, [pc, #476]	@ (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b74      	ldr	r3, [pc, #464]	@ (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a73      	ldr	r2, [pc, #460]	@ (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7ff fbe9 	bl	8001ff4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002826:	f7ff fbe5 	bl	8001ff4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e10c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b6a      	ldr	r3, [pc, #424]	@ (80029e4 <HAL_RCC_OscConfig+0x474>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x2ea>
 800284c:	4b64      	ldr	r3, [pc, #400]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	4a63      	ldr	r2, [pc, #396]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	@ 0x70
 8002858:	e01c      	b.n	8002894 <HAL_RCC_OscConfig+0x324>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b05      	cmp	r3, #5
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x30c>
 8002862:	4b5f      	ldr	r3, [pc, #380]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	4a5e      	ldr	r2, [pc, #376]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	@ 0x70
 800286e:	4b5c      	ldr	r3, [pc, #368]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	4a5b      	ldr	r2, [pc, #364]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	@ 0x70
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0x324>
 800287c:	4b58      	ldr	r3, [pc, #352]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002880:	4a57      	ldr	r2, [pc, #348]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	@ 0x70
 8002888:	4b55      	ldr	r3, [pc, #340]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288c:	4a54      	ldr	r2, [pc, #336]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d015      	beq.n	80028c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7ff fbaa 	bl	8001ff4 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7ff fba6 	bl	8001ff4 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0cb      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	4b49      	ldr	r3, [pc, #292]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ee      	beq.n	80028a4 <HAL_RCC_OscConfig+0x334>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c8:	f7ff fb94 	bl	8001ff4 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7ff fb90 	bl	8001ff4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0b5      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	4b3e      	ldr	r3, [pc, #248]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ee      	bne.n	80028d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	4a38      	ldr	r2, [pc, #224]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a1 	beq.w	8002a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800290e:	4b34      	ldr	r3, [pc, #208]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b08      	cmp	r3, #8
 8002918:	d05c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d141      	bne.n	80029a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b31      	ldr	r3, [pc, #196]	@ (80029e8 <HAL_RCC_OscConfig+0x478>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fb64 	bl	8001ff4 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff fb60 	bl	8001ff4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e087      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	019b      	lsls	r3, r3, #6
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	3b01      	subs	r3, #1
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	491b      	ldr	r1, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_RCC_OscConfig+0x478>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7ff fb39 	bl	8001ff4 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7ff fb35 	bl	8001ff4 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e05c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x416>
 80029a4:	e054      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <HAL_RCC_OscConfig+0x478>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7ff fb22 	bl	8001ff4 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff fb1e 	bl	8001ff4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e045      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x444>
 80029d2:	e03d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e038      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <HAL_RCC_OscConfig+0x4ec>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d028      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d121      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d11a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0cc      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b68      	ldr	r3, [pc, #416]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d90c      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b65      	ldr	r3, [pc, #404]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d044      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d119      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e067      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4934      	ldr	r1, [pc, #208]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7ff fa50 	bl	8001ff4 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7ff fa4c 	bl	8001ff4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e04f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b25      	ldr	r3, [pc, #148]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d20c      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b22      	ldr	r3, [pc, #136]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f821 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	490a      	ldr	r1, [pc, #40]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	5ccb      	ldrb	r3, [r1, r3]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f8ea 	bl	8001de0 <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	0800342c 	.word	0x0800342c
 8002c24:	20000008 	.word	0x20000008
 8002c28:	2000000c 	.word	0x2000000c

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c30:	b090      	sub	sp, #64	@ 0x40
 8002c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c44:	4b59      	ldr	r3, [pc, #356]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d00d      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x40>
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f200 80a1 	bhi.w	8002d98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c5e:	e09b      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c64:	e09b      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c66:	4b53      	ldr	r3, [pc, #332]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c6a:	e098      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c76:	4b4d      	ldr	r3, [pc, #308]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c82:	4b4a      	ldr	r3, [pc, #296]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	2200      	movs	r2, #0
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c94:	2100      	movs	r1, #0
 8002c96:	4b47      	ldr	r3, [pc, #284]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c98:	fb03 f201 	mul.w	r2, r3, r1
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a43      	ldr	r2, [pc, #268]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca6:	fba0 1202 	umull	r1, r2, r0, r2
 8002caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cac:	460a      	mov	r2, r1
 8002cae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	61fa      	str	r2, [r7, #28]
 8002cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cc6:	f7fd fa83 	bl	80001d0 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4613      	mov	r3, r2
 8002cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cd2:	e053      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd4:	4b35      	ldr	r3, [pc, #212]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	2200      	movs	r2, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	617a      	str	r2, [r7, #20]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ce6:	f04f 0b00 	mov.w	fp, #0
 8002cea:	4652      	mov	r2, sl
 8002cec:	465b      	mov	r3, fp
 8002cee:	f04f 0000 	mov.w	r0, #0
 8002cf2:	f04f 0100 	mov.w	r1, #0
 8002cf6:	0159      	lsls	r1, r3, #5
 8002cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfc:	0150      	lsls	r0, r2, #5
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	ebb2 080a 	subs.w	r8, r2, sl
 8002d06:	eb63 090b 	sbc.w	r9, r3, fp
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d22:	eb63 0509 	sbc.w	r5, r3, r9
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	00eb      	lsls	r3, r5, #3
 8002d30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d34:	00e2      	lsls	r2, r4, #3
 8002d36:	4614      	mov	r4, r2
 8002d38:	461d      	mov	r5, r3
 8002d3a:	eb14 030a 	adds.w	r3, r4, sl
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	eb45 030b 	adc.w	r3, r5, fp
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d52:	4629      	mov	r1, r5
 8002d54:	028b      	lsls	r3, r1, #10
 8002d56:	4621      	mov	r1, r4
 8002d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	028a      	lsls	r2, r1, #10
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d66:	2200      	movs	r2, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	60fa      	str	r2, [r7, #12]
 8002d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d70:	f7fd fa2e 	bl	80001d0 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	3301      	adds	r3, #1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3740      	adds	r7, #64	@ 0x40
 8002da4:	46bd      	mov	sp, r7
 8002da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	017d7840 	.word	0x017d7840

08002db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000008 	.word	0x20000008

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	@ (8002df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	0800343c 	.word	0x0800343c

08002df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	220f      	movs	r2, #15
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e08:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	08db      	lsrs	r3, r3, #3
 8002e32:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e3a:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <HAL_RCC_GetClockConfig+0x60>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40023c00 	.word	0x40023c00

08002e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e041      	b.n	8002ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f839 	bl	8002efa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 f9c0 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d001      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e04e      	b.n	8002fc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a23      	ldr	r2, [pc, #140]	@ (8002fd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d022      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x80>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f52:	d01d      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x80>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d018      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x80>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1e      	ldr	r2, [pc, #120]	@ (8002fdc <HAL_TIM_Base_Start_IT+0xcc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x80>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00e      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x80>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x80>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x80>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a18      	ldr	r2, [pc, #96]	@ (8002fec <HAL_TIM_Base_Start_IT+0xdc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d010      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	e007      	b.n	8002fc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	40010400 	.word	0x40010400
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40001800 	.word	0x40001800

08002ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0202 	mvn.w	r2, #2
 8003024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f8d2 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8c4 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8d5 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d020      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0204 	mvn.w	r2, #4
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8ac 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f89e 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f8af 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d020      	beq.n	80030ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0208 	mvn.w	r2, #8
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2204      	movs	r2, #4
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f886 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f878 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f889 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d020      	beq.n	8003138 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01b      	beq.n	8003138 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0210 	mvn.w	r2, #16
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2208      	movs	r2, #8
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f860 	bl	80031e4 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f852 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f863 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0201 	mvn.w	r2, #1
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fe02 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f906 	bl	800338c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f834 	bl	800320c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0220 	mvn.w	r2, #32
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8d8 	bl	8003378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a46      	ldr	r2, [pc, #280]	@ (800334c <TIM_Base_SetConfig+0x12c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d00f      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a43      	ldr	r2, [pc, #268]	@ (8003350 <TIM_Base_SetConfig+0x130>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a42      	ldr	r2, [pc, #264]	@ (8003354 <TIM_Base_SetConfig+0x134>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a41      	ldr	r2, [pc, #260]	@ (8003358 <TIM_Base_SetConfig+0x138>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a40      	ldr	r2, [pc, #256]	@ (800335c <TIM_Base_SetConfig+0x13c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d108      	bne.n	8003272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a35      	ldr	r2, [pc, #212]	@ (800334c <TIM_Base_SetConfig+0x12c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003280:	d027      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a32      	ldr	r2, [pc, #200]	@ (8003350 <TIM_Base_SetConfig+0x130>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d023      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a31      	ldr	r2, [pc, #196]	@ (8003354 <TIM_Base_SetConfig+0x134>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01f      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a30      	ldr	r2, [pc, #192]	@ (8003358 <TIM_Base_SetConfig+0x138>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2f      	ldr	r2, [pc, #188]	@ (800335c <TIM_Base_SetConfig+0x13c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d017      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <TIM_Base_SetConfig+0x140>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <TIM_Base_SetConfig+0x144>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003368 <TIM_Base_SetConfig+0x148>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	@ (800336c <TIM_Base_SetConfig+0x14c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003370 <TIM_Base_SetConfig+0x150>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a29      	ldr	r2, [pc, #164]	@ (8003374 <TIM_Base_SetConfig+0x154>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a10      	ldr	r2, [pc, #64]	@ (800334c <TIM_Base_SetConfig+0x12c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0xf8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a12      	ldr	r2, [pc, #72]	@ (800335c <TIM_Base_SetConfig+0x13c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f023 0201 	bic.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
  }
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40010400 	.word	0x40010400
 8003360:	40014000 	.word	0x40014000
 8003364:	40014400 	.word	0x40014400
 8003368:	40014800 	.word	0x40014800
 800336c:	40001800 	.word	0x40001800
 8003370:	40001c00 	.word	0x40001c00
 8003374:	40002000 	.word	0x40002000

08003378 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <__libc_init_array>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4d0d      	ldr	r5, [pc, #52]	@ (80033e8 <__libc_init_array+0x38>)
 80033b4:	4c0d      	ldr	r4, [pc, #52]	@ (80033ec <__libc_init_array+0x3c>)
 80033b6:	1b64      	subs	r4, r4, r5
 80033b8:	10a4      	asrs	r4, r4, #2
 80033ba:	2600      	movs	r6, #0
 80033bc:	42a6      	cmp	r6, r4
 80033be:	d109      	bne.n	80033d4 <__libc_init_array+0x24>
 80033c0:	4d0b      	ldr	r5, [pc, #44]	@ (80033f0 <__libc_init_array+0x40>)
 80033c2:	4c0c      	ldr	r4, [pc, #48]	@ (80033f4 <__libc_init_array+0x44>)
 80033c4:	f000 f818 	bl	80033f8 <_init>
 80033c8:	1b64      	subs	r4, r4, r5
 80033ca:	10a4      	asrs	r4, r4, #2
 80033cc:	2600      	movs	r6, #0
 80033ce:	42a6      	cmp	r6, r4
 80033d0:	d105      	bne.n	80033de <__libc_init_array+0x2e>
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d8:	4798      	blx	r3
 80033da:	3601      	adds	r6, #1
 80033dc:	e7ee      	b.n	80033bc <__libc_init_array+0xc>
 80033de:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e2:	4798      	blx	r3
 80033e4:	3601      	adds	r6, #1
 80033e6:	e7f2      	b.n	80033ce <__libc_init_array+0x1e>
 80033e8:	0800344c 	.word	0x0800344c
 80033ec:	0800344c 	.word	0x0800344c
 80033f0:	0800344c 	.word	0x0800344c
 80033f4:	08003450 	.word	0x08003450

080033f8 <_init>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	bf00      	nop
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr

08003404 <_fini>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	bf00      	nop
 8003408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340a:	bc08      	pop	{r3}
 800340c:	469e      	mov	lr, r3
 800340e:	4770      	bx	lr
